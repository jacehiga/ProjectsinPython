# File: Breakout.py
# Name: Jace Higa

"""This program (once you have finished it) implements the Breakout game."""

from pgl import GWindow, GOval, GRect, GLabel
import random

# Constants

GWINDOW_WIDTH = 360               # Width of the graphics window
GWINDOW_HEIGHT = 600              # Height of the graphics window
N_ROWS = 10                       # Number of brick rows
N_COLS = 10                       # Number of brick columns
BRICK_ASPECT_RATIO = 4 / 1        # Width to height ratio of a brick
BRICK_TO_BALL_RATIO = 3 / 2       # Ratio of brick width to ball size
BRICK_TO_PADDLE_RATIO = 2 / 3     # Ratio of brick to paddle width
BRICK_SEP = 2                     # Separation between bricks
TOP_FRACTION = 0.1                # Fraction of window above bricks
BOTTOM_FRACTION = 0.05            # Fraction of window below paddle
N_BALLS = 3                       # Number of balls in a game
TIME_STEP = 10                    # Time step in milliseconds
INITIAL_Y_VELOCITY = 3.0          # Starting y velocity downward
MIN_X_VELOCITY = 1.0              # Minimum random x velocity
MAX_X_VELOCITY = 3.0              # Maximum random x velocity



# Derived constants

BRICK_WIDTH = (GWINDOW_WIDTH - (N_COLS + 1) * BRICK_SEP) / N_COLS
BRICK_HEIGHT = BRICK_WIDTH / BRICK_ASPECT_RATIO
PADDLE_WIDTH = BRICK_WIDTH / BRICK_TO_PADDLE_RATIO
PADDLE_HEIGHT = BRICK_HEIGHT / BRICK_TO_PADDLE_RATIO
PADDLE_Y = (1 - BOTTOM_FRACTION) * GWINDOW_HEIGHT - PADDLE_HEIGHT
BALL_SIZE = BRICK_WIDTH / BRICK_TO_BALL_RATIO

# Main program

def breakout():

    gw = GWindow(GWINDOW_WIDTH, GWINDOW_HEIGHT)
    gw.lives = N_BALLS

## MILESTONE 1: Colored Bricks
    brick_colors = ('Red', 'Orange', 'Green', 'Cyan', 'Blue')
    for i in range(N_ROWS):
        brick_y = (BRICK_HEIGHT*i) + (BRICK_SEP * i) + TOP_FRACTION * GWINDOW_HEIGHT
        for j in range(N_COLS):
            brick_x = BRICK_SEP * (j+1) + (BRICK_WIDTH*j)
            brick = GRect(brick_x, brick_y, BRICK_WIDTH, BRICK_HEIGHT)
            brick.set_color(brick_colors[i//2])
            brick.set_filled(True)
            gw.add(brick)
            
    

## MILESTONE 2: PADDLE
    paddle = GRect(GWINDOW_WIDTH/2 - ((BRICK_WIDTH * BRICK_TO_PADDLE_RATIO)/2), GWINDOW_HEIGHT-GWINDOW_HEIGHT*BOTTOM_FRACTION, PADDLE_WIDTH, PADDLE_HEIGHT)
    paddle.set_color('Black')
    paddle.set_filled(False)
    gw.add(paddle)

 
    


    def mousemove_action(e):
        gw.mouse_x = e.get_x()
        if gw.mouse_x > -1 and gw.mouse_x < (GWINDOW_WIDTH - PADDLE_WIDTH):
            paddle.set_location(gw.mouse_x, PADDLE_Y) 
    gw.add_event_listener("mousemove", mousemove_action)


## MILESTONE 3: BALL
    gw.counter = 0
    def step():
        if gw.ball_is_moving:
            ball.move(gw.dx, gw.dy)
            bx = ball.get_x()
            by = ball.get_y()
            if bx<0 or bx>GWINDOW_WIDTH-BALL_SIZE:
                gw.dx = -gw.dx
            if by<0:
                gw.dy = -gw.dy
            if by > GWINDOW_HEIGHT - BALL_SIZE:
                gw.lives -= 1
                gw.remove(ball)
                gw.ball_is_moving = False
                print(gw.lives)
                if gw.lives == 0:  ## Alerts user that the game is over and they lost, if they click mouse they can play again
                    game_over = GLabel('LOSER!!')
                    game_over.set_font("bold 42px 'Roboto Mono'")
                    game_over.set_color('Red')
                    gw.add(game_over, GWINDOW_WIDTH/2-game_over.get_width()/2, GWINDOW_HEIGHT/2)
                elif gw.lives <= -1:
                    breakout()
                else:
                    ball.set_location(x0, y0)
                    gw.add(ball)
            if paddle == hit_colliding_object():
                if ball.get_y() + BALL_SIZE > paddle.get_y() + PADDLE_HEIGHT*0.4:
                    pass
                else:
                    gw.dy = -gw.dy
            elif None!= hit_colliding_object():
                gw.dy = -gw.dy
                gw.remove(hit_colliding_object())
                gw.counter += 1
                if gw.counter == N_ROWS * N_COLS:  ## Alerts user that they won, if they click mouse they can play again
                    gw.remove(ball)
                    gw.ball_is_moving = False
                    winner = GLabel('Winner')
                    winner.set_font("bold 36px 'Arial'")
                    winner.set_color('Green')
                    gw.add(winner, GWINDOW_WIDTH/2-winner.get_width()/2, GWINDOW_HEIGHT/2)
                elif gw.counter == N_ROWS * N_COLS*0.5//1:  ## Speeds up the ball by 1.3 when half bricks are gone, another 1.3 when 0.8 are gone
                    gw.dx *= 1.3
                    gw.dy *= 1.3
                elif gw.counter == N_ROWS * N_COLS*0.8//1:
                    gw.dx *= 1.3
                    gw.dy *= 1.3


                
    def click_action(e):
            if not gw.ball_is_moving:
                gw.ball_is_moving = not gw.ball_is_moving
            if gw.counter >= N_COLS * N_ROWS:
                breakout()


    gw.ball_is_moving = False
    gw.dx = MIN_X_VELOCITY
    gw.dy = INITIAL_Y_VELOCITY
    x0 = (GWINDOW_WIDTH - BALL_SIZE) / 2
    y0 = (GWINDOW_HEIGHT - BALL_SIZE) / 2            
    ball = GOval(x0, y0, BALL_SIZE, BALL_SIZE)
    ball.set_color ('Black')
    ball.set_filled(True)
    gw.add(ball)
    gw.add_event_listener("click", click_action)
    gw.set_interval(step, TIME_STEP)


## MILESTONE 4: Ball Hitting Objects
    def hit_colliding_object():  ## Position Always Starts At The Top Right
        if gw.get_element_at(ball.get_x(), ball.get_y()) != None:  ## Top Left
            return(gw.get_element_at(ball.get_x(), ball.get_y()))
        elif gw.get_element_at(ball.get_x() + BALL_SIZE, ball.get_y()) != None:  ## Top Right
            return(gw.get_element_at(ball.get_x() + BALL_SIZE, ball.get_y()))
        elif gw.get_element_at(ball.get_x(), ball.get_y() + BALL_SIZE) != None:  ## Bottom Left
            return(gw.get_element_at(ball.get_x(), ball.get_y() + BALL_SIZE))
        elif gw.get_element_at(ball.get_x() + BALL_SIZE, ball.get_y() + BALL_SIZE) != None:  ## Bottom Right
            return(gw.get_element_at(ball.get_x() + BALL_SIZE, ball.get_y() + BALL_SIZE))
        else:
            return




# Startup code

if __name__ == "__main__":
    breakout()
  
