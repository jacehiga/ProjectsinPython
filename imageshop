# File: ImageShop.py
# Author: Jace Higa

"""
This program implements the "Load" and "Flip Vertical" buttons.
"""

from filechooser import choose_input_file
from pgl import GWindow, GImage, GRect, GCompound
from button import GButton

# Constants

GWINDOW_WIDTH = 900
GWINDOW_HEIGHT = 500
BUTTON_WIDTH = 125
BUTTON_HEIGHT = 20
BUTTON_MARGIN = 10
BUTTON_BACKGROUND = "#CCCCCC"

# Derived constants

BUTTON_AREA_WIDTH = 2 * BUTTON_MARGIN + BUTTON_WIDTH
IMAGE_AREA_WIDTH = GWINDOW_WIDTH - BUTTON_AREA_WIDTH

# The ImageShop application

def image_shop():
    def add_button(label, action):
        """Adds a button to the region on the left side of the window."""
        x = BUTTON_MARGIN
        y = gw.next_button_y
        button = GButton(label, action)
        button.set_size(BUTTON_WIDTH, BUTTON_HEIGHT)
        gw.add(button, x, y)
        gw.next_button_y += BUTTON_HEIGHT + BUTTON_MARGIN

    def set_image(image):
        """Sets image as the current image after removing the old one."""
        if gw.current_image is not None:
            gw.remove(gw.current_image)
        gw.current_image = image
        x = BUTTON_AREA_WIDTH + (IMAGE_AREA_WIDTH - image.get_width()) / 2
        y = (gw.get_height() - image.get_height()) / 2
        gw.add(image, x, y)

    def load_button_action():
        """Callback function for the Load button"""
        filename = choose_input_file()
        if filename != "":
            set_image(GImage(filename))

    def flip_vertical_action():
        """Callback function for the Flip Vertical button"""
        if gw.current_image is not None:
            set_image(flip_vertical(gw.current_image))

    def flip_horizontal_action():
        """Callback function for the Flip Vertical button"""
        if gw.current_image is not None:
            set_image(flip_horizontal(gw.current_image))
    
    def rotate_left_action():
        """Callback function for the Rotate Left button"""
        if gw.current_image is not None:
            set_image(rotate_left(gw.current_image))

    def rotate_right_action():
        """Callback function for the Rotate Right button"""
        if gw.current_image is not None:
            set_image(rotate_right(gw.current_image))

    def grayscale_action():
            """Callback function for the Grayscale button"""
            if gw.current_image is not None:
                set_image(grayscale(gw.current_image))
    
    def green_screen_action():
            """Callback function for the Green Screen button"""
            if gw.current_image is not None:
                filename = choose_input_file(dir="images")
                if filename != "":
                    set_image(green_screen(gw.current_image, GImage(filename)))
    
    def equalize_action():
            """Callback function for the Green Screen button"""
            if gw.current_image is not None:
                set_image(equalize(gw.current_image))

    def crop_action():
            """Callback function for the Crop button"""
            if gw.current_image is not None:
                set_image(crop_image(gw.current_image))

    gw = GWindow(GWINDOW_WIDTH, GWINDOW_HEIGHT)
    button_area = GRect(0, 0, BUTTON_AREA_WIDTH, GWINDOW_HEIGHT)
    button_area.set_filled(True)
    button_area.set_color(BUTTON_BACKGROUND)
    gw.add(button_area)
    gw.next_button_y = BUTTON_MARGIN
    gw.current_image = None
    add_button("Load", load_button_action)
    add_button("Flip Vertical", flip_vertical_action)
    add_button("Flip Horizontal", flip_horizontal_action)
    add_button("Rotate Left", rotate_left_action)
    add_button("Rotate Right", rotate_right_action)
    add_button("Grayscale", grayscale_action)
    add_button("Green Screen", green_screen_action)
    add_button("Equalize", equalize_action)
    add_button("Crop", crop_action)
    

def flip_vertical(image):
    """Creates a new GImage by flipping image vertically."""
    array = image.get_pixel_array()
    return GImage(array[::-1])

def flip_horizontal(image):
    """Creates a new GImage by flipping image horizontally."""
    array = image.get_pixel_array()
    height= len(array)
    horizontal_flipped_array = [height[::-1] for height in array]
    return GImage(horizontal_flipped_array)

def rotate_left(image):
    """Creates a new GImage by rotating it to the left."""
    array = image.get_pixel_array()
    width = len(array[0])
    height = len(array)
    width_array = []
    for i in range(width-1, -1, -1):
        height_array = []
        for j in range(height):
            height_array.append(array[j][i])
        width_array.append(height_array)
    return GImage(width_array)

def rotate_right(image):
    """Creates a new GImage by rotating it to the right."""
    array = image.get_pixel_array()
    width = len(array[0])
    height = len(array)
    width_array = []
    for i in range(width):
        height_array = []
        for j in range(height-1, -1, -1):
            height_array.append(array[j][i])
        width_array.append(height_array)
    return GImage(width_array)


def grayscale(image):
    """Creates a new GImage by adding grayscale to the image."""
    array = image.get_pixel_array()
    height = len(array)
    width = len(array[0])
    for i in range(height):
        for j in range(width):
            gray = luminance(array[i][j])
            array[i][j] = GImage.create_rgb_pixel(gray, gray, gray)
    return GImage(array)

def luminance(pixel):
    """
    Returns the luminance of a pixel, which indicates its subjective
    brightness.  This implementation uses the NTSC formula.
    """
    r = GImage.get_red(pixel)
    g = GImage.get_green(pixel)
    b = GImage.get_blue(pixel)
    return round(0.299 * r + 0.587 * g + 0.114 * b)

def green_screen(image1, image2):
    """Creates a new GImage by adding a green screen to the image."""
    array1 = image1.get_pixel_array()
    array2 = image2.get_pixel_array()
    height1 = len(array1)
    width1 = len(array1[0])
    height2 = len(array2)
    width2 = len(array2[0])
    for i in range(height2):
        for j in range(width2):
            pixel = array2[i][j]
            r = GImage.get_red(pixel)
            g = GImage.get_green(pixel)
            b = GImage.get_blue(pixel)
            if g > 2*r and g > 2*b:
                pass
            else:
                array1[i][j] = pixel
    return GImage(array1)

def equalize(image):
    """Creates a new GImage by enhancing the image."""
    hist_array = create_histogram_array(image)
    array = image.get_pixel_array()
    height = len(array)
    width = len(array[0])
    for i in range(height):
        for j in range(width):
            new_luminance = round((255 * hist_array[luminance(array[i][j])])/(len(array)*len(array[0])))
            array[i][j] = GImage.create_rgb_pixel(new_luminance, new_luminance, new_luminance)
    return GImage(array)

def luminance(pixel):
    """
    Returns the luminance of a pixel, which indicates its subjective
    brightness.  This implementation uses the NTSC formula.
    """
    r = GImage.get_red(pixel)
    g = GImage.get_green(pixel)
    b = GImage.get_blue(pixel)
    return round(0.299 * r + 0.587 * g + 0.114 * b)

def create_histogram_array(image):
    """Returns a histogram array from samples with values in range(0, n)."""
    counts_list = [0] * 256
    array = image.get_pixel_array()
    for i in range(len(array)):
        for j in range(len(array[0])):
            counts_list[luminance(array[i][j])] += 1
            for k in range(luminance(array[i][j]), 256):
                counts_list[k] += 1
    return(counts_list)

def crop_image(image):
        """Creates a new GImage that is a cropped version of the original"""
        array = image.get_pixel_array()
        height = len(array)
        width = len(array[0])
        crop_width = 300
        crop_height = 300 # dimensions of the cropped image
        crop_x = (width - crop_width) // 2
        crop_y = (height - crop_height) // 2  # coordinates of the top-left corner of the cropped image
        cropped_array = [row[crop_x:crop_x+crop_width] for row in array[crop_y:crop_y+crop_height]]
        return GImage(cropped_array)


## Grayscale

from pgl import GWindow, GImage

# Constants

GWINDOW_WIDTH = 800
GWINDOW_HEIGHT = 600
IMAGE_FILENAME = "images/Vermeer-Milkmaid.png"
IMAGE_SEP = 50

# Main program

def grayscale_image():
    gw = GWindow(GWINDOW_WIDTH, GWINDOW_HEIGHT)
    image = GImage(IMAGE_FILENAME)
    gw.add(image, (gw.get_width() - IMAGE_SEP) / 2 - image.get_width(),
                  (gw.get_height() - image.get_height()) / 2)
    grayscale = create_grayscale_image(image)
    gw.add(grayscale, (gw.get_width() + IMAGE_SEP) / 2,
                      (gw.get_height() - image.get_height()) / 2)

def create_grayscale_image(image):
    """
    Creates a grayscale image based on the luminance of each pixel
    """
    array = image.get_pixel_array()
    height = len(array)
    width = len(array[0])
    for i in range(height):
        for j in range(width):
            gray = luminance(array[i][j])
            array[i][j] = GImage.create_rgb_pixel(gray, gray, gray)
    return GImage(array)

def luminance(pixel):
    """
    Returns the luminance of a pixel, which indicates its subjective
    brightness.  This implementation uses the NTSC formula.
    """
    r = GImage.get_red(pixel)
    g = GImage.get_green(pixel)
    b = GImage.get_blue(pixel)
    return round(0.299 * r + 0.587 * g + 0.114 * b)

# Startup code

if __name__ == "__main__":
    grayscale_image()



if __name__ == "__main__":
    image_shop()
   
